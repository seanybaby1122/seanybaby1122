# function unlockBadge(name) {
#   const badges = JSON.parse(localStorage.getItem('badges') || '{}');
#   if (!badges[name]) {
#     badges[name] = true;
#     localStorage.setItem('badges', JSON.stringify(badges));
#     alert(`ðŸ… Badge Unlocked: ${name}`);
#   }
# }
# function showBadges() {
#   const badges = JSON.parse(localStorage.getItem('badges') || '{}');
#   const badgeList = Object.keys(badges).map(b => `<li>${b}</li>`).join('');
#   document.getElementById('badgeList').innerHTML = badgeList || '<li>No badges yet</li>';
# }

// A more robust and structured approach for badge data
const BADGE_STORAGE_KEY = 'appBadges';

/**
 * Retrieves the current state of badges from local storage.
 * Handles potential parsing errors gracefully.
 * @returns {object} An object where keys are badge names and values are booleans.
 */
function getBadges() {
  try {
    const badges = JSON.parse(localStorage.getItem(BADGE_STORAGE_KEY) || '{}');
    // Basic validation to ensure the stored data is an object
    if (typeof badges !== 'object' || badges === null) {
      console.error("Invalid badge data in local storage. Resetting.");
      return {};
    }
    return badges;
  } catch (error) {
    console.error("Error retrieving badges from local storage:", error);
    // Return an empty object in case of parsing errors
    return {};
  }
}

/**
 * Saves the current state of badges to local storage.
 * @param {object} badges - The badge object to save.
 */
function saveBadges(badges) {
  try {
    localStorage.setItem(BADGE_STORAGE_KEY, JSON.stringify(badges));
  } catch (error) {
    console.error("Error saving badges to local storage:", error);
    // Handle potential storage full errors or other issues
    alert("Could not save badge progress. Local storage might be full.");
  }
}

/**
 * Unlocks a specific badge if it hasn't been unlocked already.
 * Provides feedback to the user.
 * @param {string} name - The name of the badge to unlock.
 */
function unlockBadge(name) {
  if (!name || typeof name !== 'string') {
    console.error("Invalid badge name provided.");
    return;
  }

  const badges = getBadges();

  if (!badges[name]) {
    badges[name] = true;
    saveBadges(badges);
    // Enhanced user feedback with more structure
    displayBadgeNotification(name);
  } else {
    console.log(`Badge "${name}" is already unlocked.`);
  }
}

/**
 * Displays a notification when a badge is unlocked.
 * This is a placeholder and can be customized for better UI/UX.
 * @param {string} name - The name of the unlocked badge.
 */
function displayBadgeNotification(name) {
  // You can replace this with a more visually appealing notification system
  // e.g., a modal, a toast message, or integrating with a notification library.
  alert(`ðŸŽ‰ Badge Unlocked: ${name}!`);
}

/**
 * Renders the list of unlocked badges to a specified HTML element.
 * @param {string} elementId - The ID of the HTML element to render the badge list into.
 */
function showBadges(elementId = 'badgeList') {
  const badges = getBadges();
  const badgeElement = document.getElementById(elementId);

  if (!badgeElement) {
    console.error(`Element with ID "${elementId}" not found.`);
    return;
  }

  const unlockedBadgeNames = Object.keys(badges).filter(badgeName => badges[badgeName]);

  if (unlockedBadgeNames.length === 0) {
    badgeElement.innerHTML = '<li>No badges unlocked yet. Keep exploring!</li>';
  } else {
    const badgeListItems = unlockedBadgeNames.map(b => `<li>${escapeHTML(b)}</li>`).join('');
    badgeElement.innerHTML = badgeListItems;
  }
}

/**
 * Basic HTML escaping to prevent XSS issues if badge names come from user input.
 * @param {string} str - The string to escape.
 * @returns {string} The escaped string.
 */
function escapeHTML(str) {
    const div = document.createElement('div');
    div.appendChild(document.createTextNode(str));
    return div.innerHTML;
}

// Example Usage:
// Call unlockBadge('First Steps') when the user performs a specific action.
// Call showBadges() when the page loads or a dedicated badge display area is visible.

// To test:
// unlockBadge('Explorer');
// unlockBadge('Master');
// showBadges(); // Assumes there's an element with id="badgeList" in your HTML