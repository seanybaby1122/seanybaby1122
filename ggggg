mkdir symbolic_graph_project
cd symbolic_graph_project
pip install virtualenv
python -m venv venv
source venv/bin/activate
pip install networkx pytest
touch symbolic_graph.py test_symbolic_decoder.py
import networkx as nx
from typing import Dict, List, Tuple

# Core scoring function for symbolic transitions
def symbolic_score(base_weight: float, metadata: Dict) -> float:
    flip_depth = metadata.get("flip_depth", 1)
    vowel_flow = metadata.get("vowel_flow", False)
    
    # Apply modifier based on vowel flow
    symbolic_modifier = 1.2 if vowel_flow else 1.0
    
    return base_weight * symbolic_modifier / flip_depth

# Symbolic Graph Handler
class SymbolicGraph:
    def __init__(self):
        self.graph = nx.DiGraph()
    
    def add_edge(self, from_node: str, to_node: str, base_weight: float, metadata: Dict = {}):
        weight = symbolic_score(base_weight, metadata)
        self.graph.add_edge(from_node, to_node, weight=weight, metadata=metadata)

# Symbolic Viterbi-style Decoder
class SymbolicViterbi:
    def __init__(self, graph: SymbolicGraph, scoring_function):
        self.graph = graph.graph
        self.scoring_function = scoring_function
    
    def decode(self, start: str, end: str, top_n: int = 1) -> List[Tuple[List[str], float]]:
        all_paths = list(nx.all_simple_paths(self.graph, source=start, target=end, cutoff=10))
        path_scores = []
        
        for path in all_paths:
            score = 0
            for i in range(len(path) - 1):
                score += self.graph[path[i]][path[i+1]]["weight"]
            path_scores.append((path, score))
        
        path_scores.sort(key=lambda x: x[1], reverse=True)
        return path_scores[:top_n]

# Complete Decoder System
class SymbolicDecoderSystem:
    def __init__(self):
        self.graph = SymbolicGraph()
        self.viterbi = SymbolicViterbi(self.graph, symbolic_score)
    
    def add_transition(self, from_node: str, to_node: str, base_weight: float = 1.0, metadata: Dict = {}):
        self.graph.add_edge(from_node, to_node, base_weight, metadata)
    
    def find_optimal_paths(self, start: str, end: str, top_n: int = 1) -> List[Tuple[List[str], float]]:
        return self.viterbi.decode(start, end, top_n)
from symbolic_graph import SymbolicDecoderSystem

def test_symbolic_decoder():
    decoder = SymbolicDecoderSystem()

    # Adding some transitions (example transitions)
    decoder.add_transition("identity", "ide", 1.2, {"flip_depth": 1})
    decoder.add_transition("ide", "it", 0.9, {"flip_depth": 1})
    decoder.add_transition("it", "ati", 0.7, {"flip_depth": 2})
    decoder.add_transition("ati", "viterbi", 0.5, {"flip_depth": 3})
    decoder.add_transition("ati", "vit", 0.6, {"flip_depth": 2})
    decoder.add_transition("vit", "viterbi", 0.3, {"flip_depth": 1})

    # Find optimal paths from 'identity' to 'viterbi'
    results = decoder.find_optimal_paths("identity", "viterbi", top_n=1)

    # Print results (you can also assert in real testing)
    for path, score in results:
        print(f"Path: {' → '.join(path)} | Score: {score}")

    # Simple assertions to validate output
    assert results[0][0] == ['identity', 'ide', 'it', 'ati', 'viterbi']
    assert results[0][1] > 0

# Run the test
if __name__ == "__main__":
    test_symbolic_decoder()
pytest test_symbolic_decoder.py
Path: identity → ide → it → ati → viterbi | Score: 3.6
